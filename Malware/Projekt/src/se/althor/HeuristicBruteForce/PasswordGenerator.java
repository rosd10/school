/**
 * 
 */
package se.althor.HeuristicBruteForce;

import java.util.LinkedList;

/**
 * Generates passwords from rules.
 * 
 * @author Kristian Lundkvist
 * 
 */
public class PasswordGenerator implements Runnable {

	/**
	 * Path to the file with rules.
	 */
	private String rulesFile;

	/**
	 * The queue of generated passwords.
	 */
	private LinkedList<String> passwordQueue;

	/**
	 * The maximum amount of generated passwords.
	 */
	private int queueLength;

	/**
	 * True while generating passwords, false when not.
	 */
	private boolean running;

	/**
	 * Default constructor.
	 */
	public PasswordGenerator() {
		this.setRulesFile("");
		this.setPasswordQueue(new LinkedList<String>());
		this.setQueueLength(1000);
	}

	/**
	 * Constructor.
	 * 
	 * @param rulesFile
	 *            Path to the rules file.
	 */
	public PasswordGenerator(String rulesFile) {
		this.setRulesFile(rulesFile);
		this.setPasswordQueue(new LinkedList<String>());
		this.setQueueLength(1000);
		this.running = false;
	}

	/**
	 * Constructor.
	 * 
	 * @param rulesFile
	 *            Path to the rules file.
	 * @param queueLength
	 *            Maximum amount of passwords in queue.
	 */
	public PasswordGenerator(String rulesFile, int queueLength) {
		this.setRulesFile(rulesFile);
		this.setPasswordQueue(new LinkedList<String>());
		this.setQueueLength(queueLength);
		this.running = false;
	}

	/**
	 * Returns the path to the rules file.
	 * 
	 * @return Path to the rules file.
	 */
	public String getRulesFile() {
		return rulesFile;
	}

	/**
	 * Sets the path to the rule file.
	 * 
	 * @param rulesFile
	 *            The path to the new rules file.
	 */
	public void setRulesFile(String rulesFile) {
		this.rulesFile = rulesFile;
	}

	/**
	 * Returns the entire queue of passwords.
	 * 
	 * @return The queue with passwords.
	 */
	public LinkedList<String> getPasswordQueue() {
		return passwordQueue;
	}

	/**
	 * Sets the password queue.
	 * 
	 * @param passwordQueue
	 *            The new password queue.
	 */
	public void setPasswordQueue(LinkedList<String> passwordQueue) {
		this.passwordQueue = passwordQueue;
	}

	/**
	 * @return the queueLength
	 */
	public int getQueueLength() {
		return queueLength;
	}

	/**
	 * Sets the new queue length.
	 * 
	 * @param queueLength
	 *            The new queue length.
	 */
	public void setQueueLength(int queueLength) {
		this.queueLength = queueLength;
	}

	/**
	 * Returns the running state.
	 * 
	 * @return True if running, false otherwise.
	 */
	public boolean getRunning() {
		return this.running;
	}

	/**
	 * Sets running state.
	 * 
	 * @param running
	 *            True if running, false otherwise.
	 */
	public void setRunning(boolean running) {
		this.running = running;
	}

	@Override
	public void run() {
		while (running) {

		}
	}

}
