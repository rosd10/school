/**
 * 
 */
package se.althor.HeuristicBruteForce.heuristics.database;

import java.io.Serializable;

/**
 * An item in the neighbor table.
 * 
 * @author Kristian Lundkvist
 * 
 */
public class TableItem implements Serializable {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference character of the item.
	 */
	private char reference;

	/**
	 * The relative character of the item.
	 */
	private char relative;

	/**
	 * The number of times the relative character appears next to the reference
	 * character.
	 */
	private long nextTo;

	/**
	 * The number of times the relative character appears apart from the
	 * reference character.
	 */
	private long apartFrom;

	/**
	 * Default constructor.
	 */
	public TableItem() {
		this.setReference(' ');
		this.setRelative(' ');
		this.setNextTo(0);
		this.setApartFrom(0);
	}

	/**
	 * Constructor. Sets nextTo and apartFrom to 0.
	 * 
	 * @param reference
	 *            The reference character.
	 * @param relative
	 *            The relative character.
	 */
	public TableItem(char reference, char relative) {
		this.setReference(reference);
		this.setRelative(relative);
		this.setNextTo(0);
		this.setApartFrom(0);
	}

	/**
	 * Constructor.
	 * 
	 * @param reference
	 *            The reference character.
	 * @param relative
	 *            The relative character.
	 * @param nextTo
	 *            The value of nextTo.
	 * @param apartFrom
	 *            The value of apartFrom.
	 */
	public TableItem(char reference, char relative, long nextTo, long apartFrom) {
		this.setReference(reference);
		this.setRelative(relative);
		this.setNextTo(nextTo);
		this.setApartFrom(apartFrom);
	}

	/**
	 * @return The reference character.
	 */
	public char getReference() {
		return reference;
	}

	/**
	 * @param reference
	 *            The new value of the reference character.
	 */
	public void setReference(char reference) {
		this.reference = reference;
	}

	/**
	 * @return The relative character.
	 */
	public char getRelative() {
		return relative;
	}

	/**
	 * @param relative
	 *            The new value of the relative character.
	 */
	public void setRelative(char relative) {
		this.relative = relative;
	}

	/**
	 * @return The amount of times the relative character appears next to the
	 *         reference character.
	 */
	public long getNextTo() {
		return nextTo;
	}

	/**
	 * @param nextTo
	 *            The new value of nextTo.
	 */
	public void setNextTo(long nextTo) {
		this.nextTo = nextTo;
	}

	/**
	 * @return The amount of times the relative character appears apart from the
	 *         reference character.
	 */
	public long getApartFrom() {
		return apartFrom;
	}

	/**
	 * @param apartFrom
	 *            The new value of apartFrom.
	 */
	public void setApartFrom(long apartFrom) {
		this.apartFrom = apartFrom;
	}

	/**
	 * Increases the nextTo value by 1.
	 */
	public void increaseNextTo() {
		this.nextTo++;
	}

	/**
	 * Increases the apartFrom value by 1.
	 */
	public void increaseApartFrom() {
		this.apartFrom++;
	}
}
