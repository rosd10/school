/**
 * 
 */
package se.althor.HeuristicBruteForce.heuristics.database;

/**
 * Neighbor table for suffixes.
 * 
 * @author Kristian Lundkvist
 * 
 */
public class Suffix extends NeighborTable implements HeuristicCheck {

	private static final long serialVersionUID = 1L;

	/**
	 * Static suffixes to search for to make special evaluations with.
	 */
	private static final String[] suffixes = { "ation", "sion", "er", "cian",
			"ness", "al", "ary", "ment", "able", "ful", "ize", "ate" };

	@Override
	public boolean isValid(String string) {

		// Checks if the suffix is valid. That is if the last character before
		// the suffix is the same as the first in the suffix it's not a valid
		// word.
		for (int i = 0; i < Suffix.suffixes.length; i++) {
			if (string.endsWith(Suffix.suffixes[i])) {
				char suffix = Suffix.suffixes[i].toCharArray()[0];
				char lastChar = string.charAt(string.length()
						- Suffix.suffixes[i].length());

				if (suffix == lastChar) {
					return false;
				}
			}
		}

		char[] characters = string.substring(string.length() - 3,
				string.length()).toCharArray();

		// Checks if the suffix is valid according to the neighbor table.
		if (this.getNextTo(characters[0], characters[1]) == 0
				|| this.getNextTo(characters[1], characters[2]) == 0) {
			return false;
		}

		return true;
	}

	@Override
	public void analyseWord(String word) {
		char[] characters = word.substring(word.length() - 3, word.length())
				.toCharArray();

		this.increaseNextTo(characters[0], characters[1]);
		this.increaseNextTo(characters[1], characters[2]);

	}

}
