/**
 * 
 */
package se.althor.HeuristicBruteForce.heuristics;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;

import se.althor.HeuristicBruteForce.heuristics.database.Database;
import se.althor.HeuristicBruteForce.heuristics.database.GeneralNeighborTable;
import se.althor.HeuristicBruteForce.heuristics.database.Prefix;
import se.althor.HeuristicBruteForce.heuristics.database.Suffix;

/**
 * Runs a heuristic analysis of a wordlist, constructing a database based on it.
 * 
 * @author Kristian Lundkvist
 * 
 */
public class HeuristicAnalysis {

	/**
	 * The path to the wordlist.
	 */
	private String wordlist;

	/**
	 * The database used in the character position analysis.
	 */
	private Database database;

	/**
	 * Default constructor.
	 */
	public HeuristicAnalysis() {
		this.setWordlist("");
		this.database = new Database();
	}

	/**
	 * Constructor.
	 * 
	 * @param wordlist
	 *            The path to the wordlist.
	 */
	public HeuristicAnalysis(String wordlist) {
		this.setWordlist(wordlist);
		this.database = new Database();
	}

	/**
	 * Analyses the wordlist and constructs a database from it.
	 */
	public void analyseWordlist() {
		Prefix prefix = this.database.getPrefix();
		Suffix suffix = this.database.getSuffix();
		GeneralNeighborTable table = this.database.getNeighborTable();

		// Reads the words from the wordlist and analyse them.
		try {
			FileInputStream fstream = new FileInputStream(this.getWordlist());
			DataInputStream in = new DataInputStream(fstream);
			BufferedReader input = new BufferedReader(new InputStreamReader(in));

			String word = "";

			while ((word = input.readLine()) != null) {
				if (!word.contains("\'") && word.length() > 3) {
					prefix.analyseWord(word);
					suffix.analyseWord(word);
					table.analyseWord(word);
				}
			}

			input.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		this.database.setPrefix(prefix);
		this.database.setSuffix(suffix);
		this.database.setNeighborTable(table);

	}
	
	public boolean filterWord(String word){
		
		if(!this.database.getPrefix().isValid(word) || !this.database.getSuffix().isValid(word) || !this.database.getNeighborTable().isValid(word)){
			return false;
		}
		
		return true;
	}

	/**
	 * Writes the database to a file called "heuristicDatabase.ser".
	 */
	public void saveDatabase() {
		try {
			OutputStream file = new FileOutputStream("heuristicDatabase.ser");
			OutputStream buffer = new BufferedOutputStream(file);
			ObjectOutput output = new ObjectOutputStream(buffer);

			try {
				output.writeObject(this.database);
			} finally {
				output.close();
			}
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}

	/**
	 * Reads a database from the file "heuristicDatabase.ser".
	 */
	public void loadDatabase() {

		try {
			InputStream file = new FileInputStream("heuristicDatabase.ser");
			InputStream buffer = new BufferedInputStream(file);
			ObjectInput input = new ObjectInputStream(buffer);

			try {
				this.database = (Database) input.readObject();
			} finally {
				input.close();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}

	}

	/**
	 * @return The path to the wordlist.
	 */
	public String getWordlist() {
		return wordlist;
	}

	/**
	 * @param wordlist
	 *            The new path to the wordlist.
	 */
	public void setWordlist(String wordlist) {
		this.wordlist = wordlist;
	}

}
